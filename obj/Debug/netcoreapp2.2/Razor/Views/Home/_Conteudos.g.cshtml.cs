#pragma checksum "/home/johnatas/Documentos/Projetos/MoveIlheus/Views/Home/_Conteudos.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a7bda75e4b4378cb6a7a0730f39535dc8593a9ed"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home__Conteudos), @"mvc.1.0.view", @"/Views/Home/_Conteudos.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/_Conteudos.cshtml", typeof(AspNetCore.Views_Home__Conteudos))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/home/johnatas/Documentos/Projetos/MoveIlheus/Views/_ViewImports.cshtml"
using MoveIlheus;

#line default
#line hidden
#line 2 "/home/johnatas/Documentos/Projetos/MoveIlheus/Views/_ViewImports.cshtml"
using MoveIlheus.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a7bda75e4b4378cb6a7a0730f39535dc8593a9ed", @"/Views/Home/_Conteudos.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e7cd3b48c05bf2133f429aa2d84a7d86838293c4", @"/Views/_ViewImports.cshtml")]
    public class Views_Home__Conteudos : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "null", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("v-for", new global::Microsoft.AspNetCore.Html.HtmlString("opcao in conteudo.opcoes"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute(":value", new global::Microsoft.AspNetCore.Html.HtmlString("opcao.id"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "3", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Images/icon_marker.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("width: 30px;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Images/icon_line.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Images/icon_polygon.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(37, 2546, true);
            WriteLiteral(@"
<div class=""questionBody col-sm-12 form-group"" style=""z-index: 0;"">
    <div v-bind:class=""{ 'form-group has-error': conteudo.resposta.opcaoId == null && tentouPassar && conteudo.obrigatorio }"">
        <div v-if=""conteudo.tipo == 1"">
            <h5>
                <label v-if=""index != conteudoEditando"">{{ conteudo.texto }}</label>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <ul v-if=""index == conteudoEditando"">
                <li v-for=""(opcao, indexQ) in conteudo.opcoes"">
                    <input type=""text"" v-model=""opcao.texto"">
                    <span class=""fa fa-times btnEdit"" v-on:click=""formulario.paginas[paginaAtual].conteudos[index].removerOpcao(indexQ)""></span>
                </li>
                <content>
                    <span class=""fa fa-plus-circle btnEdit"" v-on:click=""formulario.paginas[paginaAtual].conteudos[index].adicionarOpcao""><");
            WriteLiteral(@"/span>
                </content>
            </ul>
            <div v-if=""index != conteudoEditando"" v-for=""(opcao, indexQ) in conteudo.opcoes"" class=""form-check"">
                <input type=""radio"" :name=""conteudo.id"" :id=""'id'+ conteudo.id + opcao.id"" :value=""opcao.id"" v-model=""conteudo.resposta.opcaoId"" class=""form-check-inline"">
                <label class=""form-check-label"" :for=""'id'+ conteudo.id + opcao.id"">{{ opcao.texto }}</label>
            </div>
        </div>
        <div v-if=""conteudo.tipo == 3"">
            <h5>
                <label v-if=""index != conteudoEditando"">{{ conteudo.texto }}</label>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <ul v-if=""index == conteudoEditando"">
                <li v-for=""(opcao, indexQ) in conteudo.opcoes"">
                    <input type=""text"" v-model=""opcao.texto"">
                    <span class=""fa fa-times");
            WriteLiteral(@" btnEdit"" v-on:click=""formulario.paginas[paginaAtual].conteudos[index].removerOpcao(indexQ)""></span>
                </li>
                <content>
                    <span class=""fa fa-plus-circle btnEdit"" v-on:click=""formulario.paginas[paginaAtual].conteudos[index].adicionarOpcao""></span>
                </content>
            </ul>
            <select v-if=""index != conteudoEditando"" class=""form-control"" style=""max-width: none;"" v-model=""conteudo.resposta.opcaoId"">
                ");
            EndContext();
            BeginContext(2583, 60, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a7bda75e4b4378cb6a7a0730f39535dc8593a9ed9292", async() => {
                BeginContext(2622, 12, true);
                WriteLiteral("Selecione...");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("disabled", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2643, 18, true);
            WriteLiteral("\r\n                ");
            EndContext();
            BeginContext(2661, 85, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a7bda75e4b4378cb6a7a0730f39535dc8593a9ed11286", async() => {
                BeginContext(2720, 17, true);
                WriteLiteral("{{ opcao.texto }}");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2746, 4786, true);
            WriteLiteral(@"
            </select>
        </div>
    </div>
    <div v-bind:class=""{ 'form-group has-error': conteudo.resposta.opcoesView.length == 0 && tentouPassar && conteudo.obrigatorio }"">
        <div v-if=""conteudo.tipo == 2"">
            <h5>
                <label v-if=""index != conteudoEditando"">{{ conteudo.texto }}</label>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <ul v-if=""index == conteudoEditando"">
                <li v-for=""(opcao, indexQ) in conteudo.opcoes"">
                    <input type=""text"" v-model=""opcao.texto"">
                    <span class=""fa fa-times btnEdit"" v-on:click=""formulario.paginas[paginaAtual].conteudos[index].removerOpcao(indexQ)""></span>
                </li>
                <content>
                    <span class=""fa fa-plus-circle btnEdit"" v-on:click=""formulario.paginas[paginaAtual].conteudos[index].adicionarOpcao""></span>
   ");
            WriteLiteral(@"             </content>
            </ul>
            <div v-if=""index != conteudoEditando"" v-for=""(opcao, indexQ) in conteudo.opcoes"" class=""form-check"">
                <input class=""form-check-input"" type=""checkbox"" :id=""'id'+ conteudo.id + opcao.id"" :name=""'opcoesC' + conteudo.id"" :value=""opcao.id"" v-model=""conteudo.resposta.opcoesView"">
                <label class=""form-check-label"" :for=""'id'+ conteudo.id + opcao.id"">{{ opcao.texto }}</label>
            </div>
        </div>
        <div v-if=""conteudo.tipo == 5"">
            <h5>
                <label v-if=""index != conteudoEditando"">{{ conteudo.texto }}</label>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <div v-if=""index == conteudoEditando"" class=""form-inline"">
                <input v-model=""conteudo.valor"" type=""number"" min=""1"" class=""form-control"" />
            </div>
            <div v-if=""index !");
            WriteLiteral(@"= conteudoEditando"">
                <div v-for=""(opcao, index) in conteudo.opcoes"" class=""form-inline"">
                    <span>{{ index + 1 }} - &nbsp;</span>
                    <input class=""form-control"" v-model.lazy=""opcao.texto"" />
                </div>
            </div>
        </div>
    </div>
    <div v-bind:class=""{ 'form-group has-error': conteudo.resposta.valor == null && tentouPassar && conteudo.obrigatorio }"">
        <div v-if=""conteudo.tipo == 4"">
            <h5>
                <label v-if=""index != conteudoEditando"">{{ conteudo.texto }}</label>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <div v-if=""index == conteudoEditando"" class=""form-inline"">
                <input v-model=""conteudo.opcoes[0].texto"" size=""10"" class=""form-control"" />
                <input type=""range"" v-model.number=""conteudo.valor"" min=""1"" max=""100"" class=""slider"" id=");
            WriteLiteral(@"""myRange"">
                <input v-model=""conteudo.opcoes[1].texto"" size=""10"" class=""form-control"" />
            </div>
            <div v-if=""index != conteudoEditando"" style=""text-align: center;"" @*class=""form-inline""*@>
                <span style=""float: left"">{{ conteudo.opcoes[0].texto}}</span>
                <input type=""range"" v-model.number=""conteudo.resposta.valor"" min=""1"" max=""100"" class=""slider"" id=""myRange"">
                <span style=""float: right"">{{ conteudo.opcoes[1].texto}}</span>
            </div>
        </div>
        <div v-if=""conteudo.tipo == 13"">
            <h5>
                <label v-if=""index != conteudoEditando"">{{ conteudo.texto }}</label>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <div v-if=""index != conteudoEditando"">
                <input type=""number"" @*style=""width: 25%""*@ min=""18"" v-model.lazy=""conteudo.resposta.valor"" ");
            WriteLiteral(@"class=""form-control"">
            </div>
        </div>
    </div>
    <div v-bind:class=""{ 'form-group has-error': conteudo.resposta.texto == '' && tentouPassar && conteudo.obrigatorio }"">
        <div v-if=""conteudo.tipo == 7"">
            <h5>
                <label v-if=""index != conteudoEditando"">{{ conteudo.texto }}</label>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <div v-if=""index != conteudoEditando"">
                <input type=""text"" class=""form-control"" v-model.lazy=""conteudo.resposta.texto"" placeholder=""Digite sua resposta"">
");
            EndContext();
            BeginContext(7624, 965, true);
            WriteLiteral(@"            </div>
        </div>
        <div v-if=""conteudo.tipo == 8"">
            <h5>
                <label v-if=""index != conteudoEditando"">{{ conteudo.texto }}</label>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <div v-if=""index != conteudoEditando"">
                <textarea class=""form-control"" rows=""5"" v-model.lazy=""conteudo.resposta.texto"" placeholder=""Digite sua resposta"" style=""resize: none;""></textarea>
            </div>
        </div>
        <div v-if=""conteudo.tipo == 15"">
            <h5>
                <label v-if=""index != conteudoEditando"">{{ conteudo.texto }}</label>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <div v-if=""index != conteudoEditando"">
");
            EndContext();
            BeginContext(8651, 3791, true);
            WriteLiteral(@"                <input id=""pac-input"" class=""controls form-control"" type=""text"" placeholder=""Search Box"">
            </div>
        </div>
    </div>
    <div v-bind:class=""{ 'form-group has-error': conteudo.resposta.marcado == false && tentouPassar && conteudo.obrigatorio }"">
        <div v-if=""conteudo.tipo == 14"">
            <h5>
                <input v-if=""index == conteudoEditando"" v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" class=""form-control"" type=""text"">
            </h5>
            <div v-if=""index != conteudoEditando"" class=""form-check"">
                <input type=""checkbox"" v-model=""conteudo.resposta.marcado"" class=""form-check-input"">
                <label class=""form-check-label"">{{ conteudo.texto }}</label>
            </div>
        </div>
    </div>
    <div v-if=""conteudo.tipo == 6"">
        <div v-if=""index == conteudoEditando"">
            <table class=""table table-striped table-bordered table-sm"">
                <tr>
                    <td>
        ");
            WriteLiteral(@"                <input v-model=""conteudo.texto"" placeholder=""Insira a pergunta"" type=""text"">
                    </td>
                    <td>0/100</td>
                </tr>
                <tr v-for=""(opcao, indexO) in conteudo.opcoes"">
                    <td>
                        <input v-model=""opcao.texto"" type=""text"">
                    </td>
                    <td>
                        <input type=""number"" v-model.number=""opcao.valor"" min=""0"">
                    </td>
                    <td>
                        <span class=""fa fa-times btnEdit"" v-on:click=""formulario.paginas[paginaAtual].conteudos[index].removerOpcao(indexO)""></span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class=""fa fa-plus-circle btnEdit"" v-on:click=""formulario.paginas[paginaAtual].conteudos[index].adicionarOpcao""></span>
                    </td>
                </tr>
            </table>
        </div>
        <d");
            WriteLiteral(@"iv v-if=""index != conteudoEditando"">
            <table class=""table table-striped table-bordered table-hover table-sm"">
                <tr>
                    <td>{{ conteudo.texto }}</td>
                    <td>{{ conteudo.valor }}/100</td>
                </tr>
                <tr v-for=""opcao in conteudo.opcoes"">
                    <td>{{ opcao.texto }}</td>
                    <td>
                        <input type=""number"" v-model.number=""opcao.valor"" value=""0"" min=""0"">
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div v-if=""conteudo.tipo == 9"">
        <div v-if=""index == conteudoEditando"">
            <textarea rows=""10"" v-model=""conteudo.texto""></textarea>
        </div>
        <div v-if=""index != conteudoEditando"">
            <p style=""white-space: pre-wrap; overflow-wrap: break-word; text-align: justify; max-height: 300px; overflow-y: auto;"">{{ conteudo.texto }}</p>
        </div>
    </div>
    <div v-if=""conteudo");
            WriteLiteral(@".tipo == 10"">
        <div v-if=""index == conteudoEditando"">
            <input v-model=""conteudo.texto"" type=""text"" class=""form-control"">
        </div>
        <div v-if=""index != conteudoEditando"">
            <h4>{{ conteudo.texto }}</h4>
        </div>
    </div>
    <div v-if=""conteudo.tipo == 11"">
        <div v-if=""index == conteudoEditando"">
            <button class=""btn btn-default"" style=""width: 75%; min-height: 60px;"">
                <div style=""width: 80%; float: left;"">
                    <input v-model=""conteudo.texto"" />
                </div>
                <div style=""width: 20%; float: right;"">
                    <select v-model=""conteudo.valor"">
                        ");
            EndContext();
            BeginContext(12442, 33, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a7bda75e4b4378cb6a7a0730f39535dc8593a9ed22949", async() => {
                BeginContext(12460, 6, true);
                WriteLiteral("Marker");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(12475, 26, true);
            WriteLiteral("\r\n                        ");
            EndContext();
            BeginContext(12501, 31, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a7bda75e4b4378cb6a7a0730f39535dc8593a9ed24332", async() => {
                BeginContext(12519, 4, true);
                WriteLiteral("Line");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(12532, 26, true);
            WriteLiteral("\r\n                        ");
            EndContext();
            BeginContext(12558, 34, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a7bda75e4b4378cb6a7a0730f39535dc8593a9ed25713", async() => {
                BeginContext(12576, 7, true);
                WriteLiteral("Polygon");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(12592, 632, true);
            WriteLiteral(@"
                    </select>
                </div>
            </button>
        </div>
        <div v-if=""index != conteudoEditando"">
            <div style=""text-align: center;"">
                <button class=""btn btn-default"" style=""width: 75%; min-height: 60px;"" v-on:click=""conteudoSelecionado = index; conteudo.desenhar()"">
                    <div style=""width: 80%; float: left;"">
                        <h6>{{ conteudo.texto }}</h6>
                    </div>
                    <div style=""width: 20%; float: right;"">
                        <span v-if=""conteudo.valor == 1"">
                            ");
            EndContext();
            BeginContext(13224, 59, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "a7bda75e4b4378cb6a7a0730f39535dc8593a9ed27719", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(13283, 122, true);
            WriteLiteral("\r\n                        </span>\r\n                        <span v-if=\"conteudo.valor == 2\">\r\n                            ");
            EndContext();
            BeginContext(13405, 57, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "a7bda75e4b4378cb6a7a0730f39535dc8593a9ed29084", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(13462, 122, true);
            WriteLiteral("\r\n                        </span>\r\n                        <span v-if=\"conteudo.valor == 3\">\r\n                            ");
            EndContext();
            BeginContext(13584, 60, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "a7bda75e4b4378cb6a7a0730f39535dc8593a9ed30449", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(13644, 148, true);
            WriteLiteral("\r\n                        </span>\r\n                    </div>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
